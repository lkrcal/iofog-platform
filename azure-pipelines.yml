trigger:
  branches:
    include:
      - develop
      - fix-pipeline

  paths:
    exclude:
      - README.md


variables:
  group: 'pipelines'

pool:
  vmImage: 'Ubuntu-16.04'

steps:

  - task: DownloadSecureFile@1
    displayName: 'Download secure file for azure to access gcp'
    inputs:
      secureFile: 'azure-gcp.json'

  - task: DownloadSecureFile@1
    displayName: 'Download packet token for terraform'
    inputs:
      secureFile: packet.token

  - task: DownloadSecureFile@1
    displayName: 'Download secure file for ssh access for agents'
    inputs:
      secureFile: 'azure_ssh_key'

  - task: DownloadSecureFile@1
    displayName: 'Download terraform vars file for develop'
    inputs:
      secureFile: develop.tfvars

  - task: DownloadSecureFile@1
    displayName: 'Download secure file - healthcare microservice app config'
    inputs:
      secureFile: 'develop-msv-config.yaml'
      
  - script: |
      echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      sudo apt-get update && sudo apt-get install google-cloud-sdk

      gcloud --quiet auth activate-service-account --key-file=$(Agent.TempDirectory)/azure-gcp.json
      gcloud --quiet config set project focal-freedom-236620
      
      # set env var GOOGLE_APPLICATION_CREDENTIALS for terraform to pick up for GCP authentication
      echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(Agent.TempDirectory)/azure-gcp.json"
    displayName: 'Install and init gcloud'

  - script: |
      curl -s https://$(iofogctlPackageCloudToken):@packagecloud.io/install/repositories/iofog/iofogctl-snapshots/script.deb.sh | sudo bash
      sudo apt-get install iofogctl=0.0.0-b1630
      iofogctl version
    displayName: 'Install iofogctl'

  - script: |
      cp $(Agent.TempDirectory)/packet.token $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/packet.token
    displayName: 'Copy secret files'

  - script: |
      wget https://releases.hashicorp.com/terraform/0.11.14/terraform_0.11.14_linux_amd64.zip
      unzip terraform_0.11.14_linux_amd64.zip
      sudo mv terraform /usr/local/bin/terraform
    displayName: 'Install terraform'
    workingDirectory: $(Agent.TempDirectory)

  - script: |
      terraform init
    displayName: 'Init terraform'
    workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop

  - script: |
      terraform destroy -var-file=$(Agent.TempDirectory)/develop.tfvars -auto-approve
    displayName: 'Destroy existing infrastructure'
    continueOnError: 'true'
    workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop
    # condition: and(always(), eq(variables['Build.Reason'], 'Schedule'))

  - script: |
      terraform apply -var-file=$(Agent.TempDirectory)/develop.tfvars \
                      -var 'ssh_key=$(Agent.TempDirectory)/azure_ssh_key' \
                      -var 'controller_image=$(controller_image)' \
                      -var 'connector_image=$(connector_image)' \
                      -var 'operator_image=$(operator_image)' \
                      -var 'kubelet_image=$(kubelet_image)' \
                      -var 'agent_repo=$(agent_repo)' \
                      -var 'agent_version=$(agent_version)' -auto-approve
    displayName: 'Deploy infrastructure'
    workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop
    env:
      PACKAGE_CLOUD_TOKEN: $(agentPackageCloudToken)
    continueOnError: 'true'

  - script: |
      cat iofogctl_inventory.yaml
      CONTROLLER_IP=$(sed -n 's/.*kubecontrollerip: "\([0-9.]*\)"/\1/p' iofogctl_inventory.yaml)
      docker run --name test-runner -e CONTROLLER="${CONTROLLER_IP}:51121" iofog/test-runner:1.1.0
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop'
    displayName: 'run tests'

  # Publish Test Results
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/TEST-*.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)'
    displayName: 'Publish Test Results'
