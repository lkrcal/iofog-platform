trigger:
  branches:
    include:
      - develop
      - fix-pipeline

  paths:
    exclude:
      - README.md


variables:
  group: 'pipelines'

pool:
  vmImage: 'Ubuntu-16.04'

steps:

  - task: DownloadSecureFile@1
    displayName: 'Download secure file for azure to access gcp'
    inputs:
      secureFile: 'azure-gcp.json'

  - task: DownloadSecureFile@1
    displayName: 'Download packet token for terraform'
    inputs:
      secureFile: packet.token

  - task: DownloadSecureFile@1
    displayName: 'Download secure file for ssh access for agents'
    inputs:
      secureFile: 'azure_ssh_key'

  - task: DownloadSecureFile@1
    displayName: 'Download terraform vars file for develop'
    inputs:
      secureFile: develop.tfvars

  - task: DownloadSecureFile@1
    displayName: 'Download secure file - healthcare microservice app config'
    inputs:
      secureFile: 'develop-msv-config.yaml'
      
  - script: |
      echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      sudo apt-get update && sudo apt-get install google-cloud-sdk

      gcloud --quiet auth activate-service-account --key-file=$(Agent.TempDirectory)/azure-gcp.json
      gcloud --quiet config set project focal-freedom-236620
      
      # set env var GOOGLE_APPLICATION_CREDENTIALS for terraform to pick up for GCP authentication
      echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(Agent.TempDirectory)/azure-gcp.json"
    displayName: 'Install and init gcloud'

  # - task: Docker@2
  #   inputs:
  #     containerRegistry: 'Edgeworx GCP'
  #     command: 'login'

  - script: |
      which docker-credential-gcloud
      echo "gcloud auth configure-docker"
      gcloud auth configure-docker
      echo "docker run --name test-runner gcr.io/focal-freedom-236620/test-runner:latest"
      docker run --name test-runner gcr.io/focal-freedom-236620/test-runner:latest
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop'
    displayName: 'run tests'

  # # Publish Test Results
  # - task: PublishTestResults@2
  #   inputs:
  #     testResultsFormat: 'JUnit'
  #     testResultsFiles: '**/TEST-*.xml'
  #     searchFolder: '$(System.DefaultWorkingDirectory)'
  #   displayName: 'Publish Test Results'
